2024-04-09 11:51:34,461:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-04-09 11:51:34,461:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-04-09 11:51:34,461:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-04-09 11:51:34,461:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-04-09 11:53:10,659:INFO:PyCaret ClassificationExperiment
2024-04-09 11:53:10,659:INFO:Logging name: clf-default-name
2024-04-09 11:53:10,659:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-09 11:53:10,659:INFO:version 3.2.0
2024-04-09 11:53:10,659:INFO:Initializing setup()
2024-04-09 11:53:10,659:INFO:self.USI: 86ff
2024-04-09 11:53:10,659:INFO:self._variable_keys: {'html_param', 'y_train', 'idx', 'fix_imbalance', 'USI', 'is_multiclass', 'data', 'exp_name_log', 'memory', 'seed', 'log_plots_param', 'pipeline', 'fold_generator', 'gpu_param', 'fold_shuffle_param', 'fold_groups_param', 'X_test', 'X_train', 'y', 'y_test', 'logging_param', 'exp_id', 'target_param', 'n_jobs_param', '_ml_usecase', 'gpu_n_jobs_param', 'X', '_available_plots'}
2024-04-09 11:53:10,659:INFO:Checking environment
2024-04-09 11:53:10,659:INFO:python_version: 3.11.5
2024-04-09 11:53:10,659:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-04-09 11:53:10,659:INFO:machine: AMD64
2024-04-09 11:53:10,659:INFO:platform: Windows-10-10.0.22631-SP0
2024-04-09 11:53:10,659:INFO:Memory: svmem(total=16718413824, available=5674385408, percent=66.1, used=11044028416, free=5674385408)
2024-04-09 11:53:10,659:INFO:Physical Core: 12
2024-04-09 11:53:10,659:INFO:Logical Core: 16
2024-04-09 11:53:10,659:INFO:Checking libraries
2024-04-09 11:53:10,659:INFO:System:
2024-04-09 11:53:10,659:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-04-09 11:53:10,659:INFO:executable: C:\Users\yjg10\anaconda3\python.exe
2024-04-09 11:53:10,659:INFO:   machine: Windows-10-10.0.22631-SP0
2024-04-09 11:53:10,659:INFO:PyCaret required dependencies:
2024-04-09 11:53:10,674:INFO:                 pip: 23.2.1
2024-04-09 11:53:10,674:INFO:          setuptools: 68.0.0
2024-04-09 11:53:10,674:INFO:             pycaret: 3.2.0
2024-04-09 11:53:10,674:INFO:             IPython: 8.15.0
2024-04-09 11:53:10,674:INFO:          ipywidgets: 8.0.4
2024-04-09 11:53:10,674:INFO:                tqdm: 4.65.0
2024-04-09 11:53:10,674:INFO:               numpy: 1.24.3
2024-04-09 11:53:10,674:INFO:              pandas: 1.5.3
2024-04-09 11:53:10,674:INFO:              jinja2: 3.1.2
2024-04-09 11:53:10,674:INFO:               scipy: 1.11.4
2024-04-09 11:53:10,674:INFO:              joblib: 1.2.0
2024-04-09 11:53:10,674:INFO:             sklearn: 1.4.1.post1
2024-04-09 11:53:10,674:INFO:                pyod: 1.1.3
2024-04-09 11:53:10,674:INFO:            imblearn: 0.11.0
2024-04-09 11:53:10,674:INFO:   category_encoders: 2.6.3
2024-04-09 11:53:10,674:INFO:            lightgbm: 4.3.0
2024-04-09 11:53:10,674:INFO:               numba: 0.57.1
2024-04-09 11:53:10,674:INFO:            requests: 2.31.0
2024-04-09 11:53:10,674:INFO:          matplotlib: 3.7.2
2024-04-09 11:53:10,674:INFO:          scikitplot: 0.3.7
2024-04-09 11:53:10,674:INFO:         yellowbrick: 1.5
2024-04-09 11:53:10,674:INFO:              plotly: 5.9.0
2024-04-09 11:53:10,674:INFO:    plotly-resampler: Not installed
2024-04-09 11:53:10,674:INFO:             kaleido: 0.2.1
2024-04-09 11:53:10,674:INFO:           schemdraw: 0.15
2024-04-09 11:53:10,674:INFO:         statsmodels: 0.14.0
2024-04-09 11:53:10,674:INFO:              sktime: 0.21.1
2024-04-09 11:53:10,674:INFO:               tbats: 1.1.3
2024-04-09 11:53:10,674:INFO:            pmdarima: 2.0.4
2024-04-09 11:53:10,674:INFO:              psutil: 5.9.0
2024-04-09 11:53:10,674:INFO:          markupsafe: 2.1.1
2024-04-09 11:53:10,674:INFO:             pickle5: Not installed
2024-04-09 11:53:10,674:INFO:         cloudpickle: 2.2.1
2024-04-09 11:53:10,674:INFO:         deprecation: 2.1.0
2024-04-09 11:53:10,674:INFO:              xxhash: 2.0.2
2024-04-09 11:53:10,674:INFO:           wurlitzer: Not installed
2024-04-09 11:53:10,674:INFO:PyCaret optional dependencies:
2024-04-09 11:53:10,711:INFO:                shap: Not installed
2024-04-09 11:53:10,711:INFO:           interpret: Not installed
2024-04-09 11:53:10,711:INFO:                umap: Not installed
2024-04-09 11:53:10,711:INFO:     ydata_profiling: Not installed
2024-04-09 11:53:10,711:INFO:  explainerdashboard: Not installed
2024-04-09 11:53:10,711:INFO:             autoviz: Not installed
2024-04-09 11:53:10,711:INFO:           fairlearn: Not installed
2024-04-09 11:53:10,711:INFO:          deepchecks: Not installed
2024-04-09 11:53:10,712:INFO:             xgboost: 2.0.3
2024-04-09 11:53:10,712:INFO:            catboost: 1.2.2
2024-04-09 11:53:10,712:INFO:              kmodes: Not installed
2024-04-09 11:53:10,712:INFO:             mlxtend: Not installed
2024-04-09 11:53:10,712:INFO:       statsforecast: Not installed
2024-04-09 11:53:10,712:INFO:        tune_sklearn: Not installed
2024-04-09 11:53:10,712:INFO:                 ray: Not installed
2024-04-09 11:53:10,712:INFO:            hyperopt: Not installed
2024-04-09 11:53:10,712:INFO:              optuna: Not installed
2024-04-09 11:53:10,712:INFO:               skopt: Not installed
2024-04-09 11:53:10,712:INFO:              mlflow: Not installed
2024-04-09 11:53:10,712:INFO:              gradio: Not installed
2024-04-09 11:53:10,713:INFO:             fastapi: Not installed
2024-04-09 11:53:10,713:INFO:             uvicorn: Not installed
2024-04-09 11:53:10,713:INFO:              m2cgen: Not installed
2024-04-09 11:53:10,713:INFO:           evidently: Not installed
2024-04-09 11:53:10,713:INFO:               fugue: Not installed
2024-04-09 11:53:10,713:INFO:           streamlit: 1.32.2
2024-04-09 11:53:10,713:INFO:             prophet: 1.1.4
2024-04-09 11:53:10,713:INFO:None
2024-04-09 11:53:10,713:INFO:Set up data.
2024-04-09 11:53:10,725:INFO:Set up folding strategy.
2024-04-09 11:53:10,725:INFO:Set up train/test split.
2024-04-09 11:53:10,734:INFO:Set up index.
2024-04-09 11:53:10,735:INFO:Assigning column types.
2024-04-09 11:53:10,738:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-09 11:53:10,771:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-09 11:53:10,772:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-09 11:53:10,819:INFO:Soft dependency imported: xgboost: 2.0.3
2024-04-09 11:53:10,824:INFO:Soft dependency imported: catboost: 1.2.2
2024-04-09 11:53:10,877:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-09 11:53:10,877:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-09 11:53:10,896:INFO:Soft dependency imported: xgboost: 2.0.3
2024-04-09 11:53:10,909:INFO:Soft dependency imported: catboost: 1.2.2
2024-04-09 11:53:10,909:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-09 11:53:10,925:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-09 11:53:10,956:INFO:Soft dependency imported: xgboost: 2.0.3
2024-04-09 11:53:10,956:INFO:Soft dependency imported: catboost: 1.2.2
2024-04-09 11:53:11,019:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-09 11:53:11,066:INFO:Soft dependency imported: xgboost: 2.0.3
2024-04-09 11:53:11,066:INFO:Soft dependency imported: catboost: 1.2.2
2024-04-09 11:53:11,066:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-09 11:53:11,130:INFO:Soft dependency imported: xgboost: 2.0.3
2024-04-09 11:53:11,130:INFO:Soft dependency imported: catboost: 1.2.2
2024-04-09 11:53:11,196:INFO:Soft dependency imported: xgboost: 2.0.3
2024-04-09 11:53:11,196:INFO:Soft dependency imported: catboost: 1.2.2
2024-04-09 11:53:11,213:INFO:Preparing preprocessing pipeline...
2024-04-09 11:53:11,213:INFO:Set up label encoding.
2024-04-09 11:53:11,213:INFO:Set up simple imputation.
2024-04-09 11:53:11,213:INFO:Set up column name cleaning.
2024-04-09 11:53:11,257:INFO:Finished creating preprocessing pipeline.
2024-04-09 11:53:11,272:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\yjg10\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['id', 'radius_mean',
                                             'texture_mean', 'perimeter_mean',
                                             'area_mean', 'smoothness_mean',
                                             'compactness_mean',...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-04-09 11:53:11,272:INFO:Creating final display dataframe.
2024-04-09 11:53:11,400:INFO:Setup _display_container:                     Description             Value
0                    Session id              5526
1                        Target         diagnosis
2                   Target type            Binary
3                Target mapping        B: 0, M: 1
4           Original data shape         (569, 32)
5        Transformed data shape         (569, 32)
6   Transformed train set shape         (398, 32)
7    Transformed test set shape         (171, 32)
8              Numeric features                31
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              86ff
2024-04-09 11:53:11,467:INFO:Soft dependency imported: xgboost: 2.0.3
2024-04-09 11:53:11,469:INFO:Soft dependency imported: catboost: 1.2.2
2024-04-09 11:53:11,562:INFO:Soft dependency imported: xgboost: 2.0.3
2024-04-09 11:53:11,562:INFO:Soft dependency imported: catboost: 1.2.2
2024-04-09 11:53:11,562:INFO:setup() successfully completed in 1.01s...............
2024-04-09 11:53:18,215:INFO:gpu_param set to False
2024-04-09 11:53:18,317:INFO:Soft dependency imported: xgboost: 2.0.3
2024-04-09 11:53:18,317:INFO:Soft dependency imported: catboost: 1.2.2
2024-04-09 11:53:18,383:INFO:Soft dependency imported: xgboost: 2.0.3
2024-04-09 11:53:18,385:INFO:Soft dependency imported: catboost: 1.2.2
2024-04-09 11:53:33,988:INFO:Initializing create_model()
2024-04-09 11:53:33,988:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:53:33,989:INFO:Checking exceptions
2024-04-09 11:53:34,021:INFO:Importing libraries
2024-04-09 11:53:34,022:INFO:Copying training dataset
2024-04-09 11:53:34,026:INFO:Defining folds
2024-04-09 11:53:34,026:INFO:Declaring metric variables
2024-04-09 11:53:34,036:INFO:Importing untrained model
2024-04-09 11:53:34,039:INFO:Random Forest Classifier Imported successfully
2024-04-09 11:53:34,048:INFO:Starting cross validation
2024-04-09 11:53:34,049:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:53:38,302:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,302:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,302:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,302:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,302:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,318:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,334:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,348:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,350:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,350:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,350:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,350:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,365:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,381:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,381:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,381:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,381:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,381:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,381:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,397:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,397:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,412:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,412:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,412:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,475:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,475:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,475:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,491:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,491:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,491:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:53:38,491:INFO:Calculating mean and std
2024-04-09 11:53:38,491:INFO:Creating metrics dataframe
2024-04-09 11:53:38,511:INFO:Finalizing model
2024-04-09 11:53:38,667:INFO:Uploading results into container
2024-04-09 11:53:38,676:INFO:Uploading model into container now
2024-04-09 11:53:38,681:INFO:_master_model_container: 1
2024-04-09 11:53:38,681:INFO:_display_container: 2
2024-04-09 11:53:38,681:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=5526, verbose=0, warm_start=False)
2024-04-09 11:53:38,681:INFO:create_model() successfully completed......................................
2024-04-09 11:57:08,072:INFO:Initializing tune_model()
2024-04-09 11:57:08,073:INFO:tune_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=5526, verbose=0, warm_start=False), fold=5, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={})
2024-04-09 11:57:08,073:INFO:Checking exceptions
2024-04-09 11:57:08,122:INFO:Copying training dataset
2024-04-09 11:57:08,138:INFO:Checking base model
2024-04-09 11:57:08,139:INFO:Base model : Random Forest Classifier
2024-04-09 11:57:08,146:INFO:Declaring metric variables
2024-04-09 11:57:08,152:INFO:Defining Hyperparameters
2024-04-09 11:57:08,329:INFO:Tuning with n_jobs=-1
2024-04-09 11:57:08,329:INFO:Initializing RandomizedSearchCV
2024-04-09 11:57:13,967:INFO:best_params: {'actual_estimator__n_estimators': 100, 'actual_estimator__min_samples_split': 5, 'actual_estimator__min_samples_leaf': 4, 'actual_estimator__min_impurity_decrease': 0.001, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 10, 'actual_estimator__criterion': 'gini', 'actual_estimator__class_weight': 'balanced_subsample', 'actual_estimator__bootstrap': False}
2024-04-09 11:57:13,969:INFO:Hyperparameter search completed
2024-04-09 11:57:13,969:INFO:SubProcess create_model() called ==================================
2024-04-09 11:57:13,970:INFO:Initializing create_model()
2024-04-09 11:57:13,970:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=5526, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2EF662590>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 100, 'min_samples_split': 5, 'min_samples_leaf': 4, 'min_impurity_decrease': 0.001, 'max_features': 'log2', 'max_depth': 10, 'criterion': 'gini', 'class_weight': 'balanced_subsample', 'bootstrap': False})
2024-04-09 11:57:13,970:INFO:Checking exceptions
2024-04-09 11:57:13,970:INFO:Importing libraries
2024-04-09 11:57:13,971:INFO:Copying training dataset
2024-04-09 11:57:13,982:INFO:Defining folds
2024-04-09 11:57:13,982:INFO:Declaring metric variables
2024-04-09 11:57:13,985:INFO:Importing untrained model
2024-04-09 11:57:13,985:INFO:Declaring custom model
2024-04-09 11:57:13,987:INFO:Random Forest Classifier Imported successfully
2024-04-09 11:57:13,998:INFO:Starting cross validation
2024-04-09 11:57:13,998:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:57:14,207:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,207:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,207:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,207:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,207:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,219:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,223:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,223:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,223:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,223:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,223:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,223:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,223:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,223:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,238:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,238:INFO:Calculating mean and std
2024-04-09 11:57:14,238:INFO:Creating metrics dataframe
2024-04-09 11:57:14,238:INFO:Finalizing model
2024-04-09 11:57:14,387:INFO:Uploading results into container
2024-04-09 11:57:14,400:INFO:Uploading model into container now
2024-04-09 11:57:14,401:INFO:_master_model_container: 2
2024-04-09 11:57:14,401:INFO:_display_container: 3
2024-04-09 11:57:14,402:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=10, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=4, min_samples_split=5,
                       min_weight_fraction_leaf=0.0, n_estimators=100,
                       n_jobs=-1, oob_score=False, random_state=5526, verbose=0,
                       warm_start=False)
2024-04-09 11:57:14,402:INFO:create_model() successfully completed......................................
2024-04-09 11:57:14,555:INFO:SubProcess create_model() end ==================================
2024-04-09 11:57:14,555:INFO:choose_better activated
2024-04-09 11:57:14,559:INFO:SubProcess create_model() called ==================================
2024-04-09 11:57:14,560:INFO:Initializing create_model()
2024-04-09 11:57:14,560:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=5526, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:57:14,560:INFO:Checking exceptions
2024-04-09 11:57:14,563:INFO:Importing libraries
2024-04-09 11:57:14,563:INFO:Copying training dataset
2024-04-09 11:57:14,575:INFO:Defining folds
2024-04-09 11:57:14,575:INFO:Declaring metric variables
2024-04-09 11:57:14,575:INFO:Importing untrained model
2024-04-09 11:57:14,575:INFO:Declaring custom model
2024-04-09 11:57:14,576:INFO:Random Forest Classifier Imported successfully
2024-04-09 11:57:14,576:INFO:Starting cross validation
2024-04-09 11:57:14,577:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:57:14,802:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,802:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,802:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,802:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,802:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,818:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,818:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,820:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,820:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,820:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,820:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,834:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,834:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,834:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:57:14,834:INFO:Calculating mean and std
2024-04-09 11:57:14,834:INFO:Creating metrics dataframe
2024-04-09 11:57:14,834:INFO:Finalizing model
2024-04-09 11:57:14,999:INFO:Uploading results into container
2024-04-09 11:57:15,000:INFO:Uploading model into container now
2024-04-09 11:57:15,000:INFO:_master_model_container: 3
2024-04-09 11:57:15,000:INFO:_display_container: 4
2024-04-09 11:57:15,000:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=5526, verbose=0, warm_start=False)
2024-04-09 11:57:15,000:INFO:create_model() successfully completed......................................
2024-04-09 11:57:15,127:INFO:SubProcess create_model() end ==================================
2024-04-09 11:57:15,127:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=5526, verbose=0, warm_start=False) result for Accuracy is 0.9573
2024-04-09 11:57:15,127:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=10, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=4, min_samples_split=5,
                       min_weight_fraction_leaf=0.0, n_estimators=100,
                       n_jobs=-1, oob_score=False, random_state=5526, verbose=0,
                       warm_start=False) result for Accuracy is 0.9673
2024-04-09 11:57:15,127:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=10, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=4, min_samples_split=5,
                       min_weight_fraction_leaf=0.0, n_estimators=100,
                       n_jobs=-1, oob_score=False, random_state=5526, verbose=0,
                       warm_start=False) is best model
2024-04-09 11:57:15,127:INFO:choose_better completed
2024-04-09 11:57:15,141:INFO:_master_model_container: 3
2024-04-09 11:57:15,142:INFO:_display_container: 3
2024-04-09 11:57:15,142:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=10, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=4, min_samples_split=5,
                       min_weight_fraction_leaf=0.0, n_estimators=100,
                       n_jobs=-1, oob_score=False, random_state=5526, verbose=0,
                       warm_start=False)
2024-04-09 11:57:15,142:INFO:tune_model() successfully completed......................................
2024-04-09 11:57:28,344:INFO:Initializing evaluate_model()
2024-04-09 11:57:28,344:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=10, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=4, min_samples_split=5,
                       min_weight_fraction_leaf=0.0, n_estimators=100,
                       n_jobs=-1, oob_score=False, random_state=5526, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-04-09 11:57:28,361:INFO:Initializing plot_model()
2024-04-09 11:57:28,362:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=10, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=4, min_samples_split=5,
                       min_weight_fraction_leaf=0.0, n_estimators=100,
                       n_jobs=-1, oob_score=False, random_state=5526, verbose=0,
                       warm_start=False), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 11:57:28,362:INFO:Checking exceptions
2024-04-09 11:57:28,387:INFO:Preloading libraries
2024-04-09 11:57:28,391:INFO:Copying training dataset
2024-04-09 11:57:28,391:INFO:Plot type: pipeline
2024-04-09 11:57:28,611:INFO:Visual Rendered Successfully
2024-04-09 11:57:28,784:INFO:plot_model() successfully completed......................................
2024-04-09 11:57:33,169:INFO:Initializing plot_model()
2024-04-09 11:57:33,169:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=10, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=4, min_samples_split=5,
                       min_weight_fraction_leaf=0.0, n_estimators=100,
                       n_jobs=-1, oob_score=False, random_state=5526, verbose=0,
                       warm_start=False), plot=parameter, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 11:57:33,169:INFO:Checking exceptions
2024-04-09 11:57:33,202:INFO:Preloading libraries
2024-04-09 11:57:33,211:INFO:Copying training dataset
2024-04-09 11:57:33,211:INFO:Plot type: parameter
2024-04-09 11:57:33,211:INFO:Visual Rendered Successfully
2024-04-09 11:57:33,441:INFO:plot_model() successfully completed......................................
2024-04-09 11:57:36,054:INFO:Initializing plot_model()
2024-04-09 11:57:36,054:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=10, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=4, min_samples_split=5,
                       min_weight_fraction_leaf=0.0, n_estimators=100,
                       n_jobs=-1, oob_score=False, random_state=5526, verbose=0,
                       warm_start=False), plot=auc, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 11:57:36,054:INFO:Checking exceptions
2024-04-09 11:57:36,079:INFO:Preloading libraries
2024-04-09 11:57:36,090:INFO:Copying training dataset
2024-04-09 11:57:36,090:INFO:Plot type: auc
2024-04-09 11:57:36,242:INFO:Fitting Model
2024-04-09 11:57:36,242:INFO:Scoring test/hold-out set
2024-04-09 11:57:36,580:INFO:Visual Rendered Successfully
2024-04-09 11:57:36,727:INFO:plot_model() successfully completed......................................
2024-04-09 11:57:40,838:INFO:Initializing plot_model()
2024-04-09 11:57:40,838:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=10, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=4, min_samples_split=5,
                       min_weight_fraction_leaf=0.0, n_estimators=100,
                       n_jobs=-1, oob_score=False, random_state=5526, verbose=0,
                       warm_start=False), plot=learning, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 11:57:40,839:INFO:Checking exceptions
2024-04-09 11:57:40,865:INFO:Preloading libraries
2024-04-09 11:57:40,874:INFO:Copying training dataset
2024-04-09 11:57:40,874:INFO:Plot type: learning
2024-04-09 11:57:41,026:INFO:Fitting Model
2024-04-09 11:57:43,809:INFO:Visual Rendered Successfully
2024-04-09 11:57:43,984:INFO:plot_model() successfully completed......................................
2024-04-09 11:57:47,780:INFO:Initializing plot_model()
2024-04-09 11:57:47,781:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=10, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=4, min_samples_split=5,
                       min_weight_fraction_leaf=0.0, n_estimators=100,
                       n_jobs=-1, oob_score=False, random_state=5526, verbose=0,
                       warm_start=False), plot=confusion_matrix, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 11:57:47,781:INFO:Checking exceptions
2024-04-09 11:57:47,811:INFO:Preloading libraries
2024-04-09 11:57:47,818:INFO:Copying training dataset
2024-04-09 11:57:47,818:INFO:Plot type: confusion_matrix
2024-04-09 11:57:47,959:INFO:Fitting Model
2024-04-09 11:57:47,959:INFO:Scoring test/hold-out set
2024-04-09 11:57:48,194:INFO:Visual Rendered Successfully
2024-04-09 11:57:48,336:INFO:plot_model() successfully completed......................................
2024-04-09 11:57:50,764:INFO:Initializing plot_model()
2024-04-09 11:57:50,764:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=10, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=4, min_samples_split=5,
                       min_weight_fraction_leaf=0.0, n_estimators=100,
                       n_jobs=-1, oob_score=False, random_state=5526, verbose=0,
                       warm_start=False), plot=threshold, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 11:57:50,764:INFO:Checking exceptions
2024-04-09 11:57:50,789:INFO:Preloading libraries
2024-04-09 11:57:50,799:INFO:Copying training dataset
2024-04-09 11:57:50,799:INFO:Plot type: threshold
2024-04-09 11:57:50,953:INFO:Fitting Model
2024-04-09 11:57:58,593:INFO:Scoring test/hold-out set
2024-04-09 11:57:59,014:INFO:Visual Rendered Successfully
2024-04-09 11:57:59,254:INFO:plot_model() successfully completed......................................
2024-04-09 11:58:00,776:INFO:Initializing plot_model()
2024-04-09 11:58:00,776:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=10, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=4, min_samples_split=5,
                       min_weight_fraction_leaf=0.0, n_estimators=100,
                       n_jobs=-1, oob_score=False, random_state=5526, verbose=0,
                       warm_start=False), plot=pr, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 11:58:00,776:INFO:Checking exceptions
2024-04-09 11:58:00,803:INFO:Preloading libraries
2024-04-09 11:58:00,813:INFO:Copying training dataset
2024-04-09 11:58:00,813:INFO:Plot type: pr
2024-04-09 11:58:00,969:INFO:Fitting Model
2024-04-09 11:58:00,969:INFO:Scoring test/hold-out set
2024-04-09 11:58:01,229:INFO:Visual Rendered Successfully
2024-04-09 11:58:01,385:INFO:plot_model() successfully completed......................................
2024-04-09 11:58:04,359:INFO:Initializing plot_model()
2024-04-09 11:58:04,360:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=10, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=4, min_samples_split=5,
                       min_weight_fraction_leaf=0.0, n_estimators=100,
                       n_jobs=-1, oob_score=False, random_state=5526, verbose=0,
                       warm_start=False), plot=feature_all, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 11:58:04,360:INFO:Checking exceptions
2024-04-09 11:58:04,393:INFO:Preloading libraries
2024-04-09 11:58:04,402:INFO:Copying training dataset
2024-04-09 11:58:04,402:INFO:Plot type: feature_all
2024-04-09 11:58:04,435:WARNING:No coef_ found. Trying feature_importances_
2024-04-09 11:58:04,760:INFO:Visual Rendered Successfully
2024-04-09 11:58:04,875:INFO:plot_model() successfully completed......................................
2024-04-09 11:58:10,221:INFO:Initializing plot_model()
2024-04-09 11:58:10,221:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=10, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=4, min_samples_split=5,
                       min_weight_fraction_leaf=0.0, n_estimators=100,
                       n_jobs=-1, oob_score=False, random_state=5526, verbose=0,
                       warm_start=False), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 11:58:10,221:INFO:Checking exceptions
2024-04-09 11:58:10,237:INFO:Preloading libraries
2024-04-09 11:58:10,261:INFO:Copying training dataset
2024-04-09 11:58:10,261:INFO:Plot type: pipeline
2024-04-09 11:58:10,368:INFO:Visual Rendered Successfully
2024-04-09 11:58:10,507:INFO:plot_model() successfully completed......................................
2024-04-09 11:58:38,523:INFO:Initializing compare_models()
2024-04-09 11:58:38,523:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, include=None, exclude=None, fold=5, round=4, cross_validation=True, sort=Accuracy, n_select=5, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, 'include': None, 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 5, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-04-09 11:58:38,523:INFO:Checking exceptions
2024-04-09 11:58:38,531:INFO:Preparing display monitor
2024-04-09 11:58:38,577:INFO:Initializing Logistic Regression
2024-04-09 11:58:38,577:INFO:Total runtime is 0.0 minutes
2024-04-09 11:58:38,584:INFO:SubProcess create_model() called ==================================
2024-04-09 11:58:38,585:INFO:Initializing create_model()
2024-04-09 11:58:38,585:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=lr, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2F4E66BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:58:38,585:INFO:Checking exceptions
2024-04-09 11:58:38,585:INFO:Importing libraries
2024-04-09 11:58:38,586:INFO:Copying training dataset
2024-04-09 11:58:38,597:INFO:Defining folds
2024-04-09 11:58:38,597:INFO:Declaring metric variables
2024-04-09 11:58:38,597:INFO:Importing untrained model
2024-04-09 11:58:38,597:INFO:Logistic Regression Imported successfully
2024-04-09 11:58:38,615:INFO:Starting cross validation
2024-04-09 11:58:38,617:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:58:38,676:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:38,677:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:38,677:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:38,677:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:38,677:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:38,677:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:38,677:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-04-09 11:58:38,677:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:38,677:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-04-09 11:58:38,677:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:38,677:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:38,677:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-04-09 11:58:38,677:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-04-09 11:58:38,677:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:38,677:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:38,677:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:38,677:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:38,693:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:38,694:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-04-09 11:58:38,696:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:38,704:INFO:Calculating mean and std
2024-04-09 11:58:38,704:INFO:Creating metrics dataframe
2024-04-09 11:58:38,706:INFO:Uploading results into container
2024-04-09 11:58:38,706:INFO:Uploading model into container now
2024-04-09 11:58:38,707:INFO:_master_model_container: 4
2024-04-09 11:58:38,707:INFO:_display_container: 4
2024-04-09 11:58:38,707:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5526, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-09 11:58:38,707:INFO:create_model() successfully completed......................................
2024-04-09 11:58:38,906:INFO:SubProcess create_model() end ==================================
2024-04-09 11:58:38,906:INFO:Creating metrics dataframe
2024-04-09 11:58:38,922:INFO:Initializing K Neighbors Classifier
2024-04-09 11:58:38,922:INFO:Total runtime is 0.005746376514434814 minutes
2024-04-09 11:58:38,922:INFO:SubProcess create_model() called ==================================
2024-04-09 11:58:38,922:INFO:Initializing create_model()
2024-04-09 11:58:38,922:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=knn, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2F4E66BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:58:38,922:INFO:Checking exceptions
2024-04-09 11:58:38,922:INFO:Importing libraries
2024-04-09 11:58:38,922:INFO:Copying training dataset
2024-04-09 11:58:38,936:INFO:Defining folds
2024-04-09 11:58:38,936:INFO:Declaring metric variables
2024-04-09 11:58:38,939:INFO:Importing untrained model
2024-04-09 11:58:38,939:INFO:K Neighbors Classifier Imported successfully
2024-04-09 11:58:38,955:INFO:Starting cross validation
2024-04-09 11:58:38,955:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:58:39,010:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 336, in predict_proba
    return self.steps[-1][-1].predict_proba(X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 316, in predict_proba
    and ArgKminClassMode.is_usable_for(X, self._fit_X, metric)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,010:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 336, in predict_proba
    return self.steps[-1][-1].predict_proba(X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 316, in predict_proba
    and ArgKminClassMode.is_usable_for(X, self._fit_X, metric)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,011:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 336, in predict_proba
    return self.steps[-1][-1].predict_proba(X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 316, in predict_proba
    and ArgKminClassMode.is_usable_for(X, self._fit_X, metric)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,011:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 336, in predict_proba
    return self.steps[-1][-1].predict_proba(X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 316, in predict_proba
    and ArgKminClassMode.is_usable_for(X, self._fit_X, metric)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,011:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 336, in predict_proba
    return self.steps[-1][-1].predict_proba(X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 316, in predict_proba
    and ArgKminClassMode.is_usable_for(X, self._fit_X, metric)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,011:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py:842: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to 0.0. Details: 
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 136, in __call__
    score = scorer._score(
            ^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 353, in _score
    y_pred = method_caller(estimator, "predict", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 327, in predict
    y = self.steps[-1][-1].predict(X, **predict_params)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 246, in predict
    if self._fit_method == "brute" and ArgKminClassMode.is_usable_for(
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,011:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py:842: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to 0.0. Details: 
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 136, in __call__
    score = scorer._score(
            ^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 353, in _score
    y_pred = method_caller(estimator, "predict", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 327, in predict
    y = self.steps[-1][-1].predict(X, **predict_params)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 246, in predict
    if self._fit_method == "brute" and ArgKminClassMode.is_usable_for(
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,011:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py:842: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to 0.0. Details: 
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 136, in __call__
    score = scorer._score(
            ^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 353, in _score
    y_pred = method_caller(estimator, "predict", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 327, in predict
    y = self.steps[-1][-1].predict(X, **predict_params)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 246, in predict
    if self._fit_method == "brute" and ArgKminClassMode.is_usable_for(
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,011:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py:842: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to 0.0. Details: 
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 136, in __call__
    score = scorer._score(
            ^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 353, in _score
    y_pred = method_caller(estimator, "predict", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 327, in predict
    y = self.steps[-1][-1].predict(X, **predict_params)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 246, in predict
    if self._fit_method == "brute" and ArgKminClassMode.is_usable_for(
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,011:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py:842: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to 0.0. Details: 
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 136, in __call__
    score = scorer._score(
            ^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 353, in _score
    y_pred = method_caller(estimator, "predict", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 327, in predict
    y = self.steps[-1][-1].predict(X, **predict_params)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 246, in predict
    if self._fit_method == "brute" and ArgKminClassMode.is_usable_for(
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,011:INFO:Calculating mean and std
2024-04-09 11:58:39,011:INFO:Creating metrics dataframe
2024-04-09 11:58:39,011:INFO:Uploading results into container
2024-04-09 11:58:39,011:INFO:Uploading model into container now
2024-04-09 11:58:39,011:INFO:_master_model_container: 5
2024-04-09 11:58:39,011:INFO:_display_container: 4
2024-04-09 11:58:39,011:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-04-09 11:58:39,011:INFO:create_model() successfully completed......................................
2024-04-09 11:58:39,181:WARNING:create_model() for KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform') raised an exception or returned all 0.0, trying without fit_kwargs:
2024-04-09 11:58:39,181:WARNING:Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 797, in compare_models
    np.sum(
AssertionError

2024-04-09 11:58:39,181:INFO:Initializing create_model()
2024-04-09 11:58:39,181:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=knn, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2F4E66BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:58:39,181:INFO:Checking exceptions
2024-04-09 11:58:39,181:INFO:Importing libraries
2024-04-09 11:58:39,181:INFO:Copying training dataset
2024-04-09 11:58:39,194:INFO:Defining folds
2024-04-09 11:58:39,195:INFO:Declaring metric variables
2024-04-09 11:58:39,197:INFO:Importing untrained model
2024-04-09 11:58:39,200:INFO:K Neighbors Classifier Imported successfully
2024-04-09 11:58:39,205:INFO:Starting cross validation
2024-04-09 11:58:39,205:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:58:39,230:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 336, in predict_proba
    return self.steps[-1][-1].predict_proba(X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 316, in predict_proba
    and ArgKminClassMode.is_usable_for(X, self._fit_X, metric)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,233:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py:842: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to 0.0. Details: 
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 136, in __call__
    score = scorer._score(
            ^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 353, in _score
    y_pred = method_caller(estimator, "predict", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 327, in predict
    y = self.steps[-1][-1].predict(X, **predict_params)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 246, in predict
    if self._fit_method == "brute" and ArgKminClassMode.is_usable_for(
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,235:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 336, in predict_proba
    return self.steps[-1][-1].predict_proba(X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 316, in predict_proba
    and ArgKminClassMode.is_usable_for(X, self._fit_X, metric)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,235:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 336, in predict_proba
    return self.steps[-1][-1].predict_proba(X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 316, in predict_proba
    and ArgKminClassMode.is_usable_for(X, self._fit_X, metric)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,236:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 336, in predict_proba
    return self.steps[-1][-1].predict_proba(X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 316, in predict_proba
    and ArgKminClassMode.is_usable_for(X, self._fit_X, metric)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,237:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py:842: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to 0.0. Details: 
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 136, in __call__
    score = scorer._score(
            ^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 353, in _score
    y_pred = method_caller(estimator, "predict", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 327, in predict
    y = self.steps[-1][-1].predict(X, **predict_params)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 246, in predict
    if self._fit_method == "brute" and ArgKminClassMode.is_usable_for(
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,238:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py:842: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to 0.0. Details: 
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 136, in __call__
    score = scorer._score(
            ^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 353, in _score
    y_pred = method_caller(estimator, "predict", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 327, in predict
    y = self.steps[-1][-1].predict(X, **predict_params)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 246, in predict
    if self._fit_method == "brute" and ArgKminClassMode.is_usable_for(
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,239:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py:842: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to 0.0. Details: 
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 136, in __call__
    score = scorer._score(
            ^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 353, in _score
    y_pred = method_caller(estimator, "predict", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 327, in predict
    y = self.steps[-1][-1].predict(X, **predict_params)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 246, in predict
    if self._fit_method == "brute" and ArgKminClassMode.is_usable_for(
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,242:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 336, in predict_proba
    return self.steps[-1][-1].predict_proba(X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 316, in predict_proba
    and ArgKminClassMode.is_usable_for(X, self._fit_X, metric)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,251:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py:842: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to 0.0. Details: 
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 136, in __call__
    score = scorer._score(
            ^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 353, in _score
    y_pred = method_caller(estimator, "predict", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 85, in _get_response_values
    y_pred = prediction_method(X)
             ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 327, in predict
    y = self.steps[-1][-1].predict(X, **predict_params)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\neighbors\_classification.py", line 246, in predict
    if self._fit_method == "brute" and ArgKminClassMode.is_usable_for(
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 471, in is_usable_for
    ArgKmin.is_usable_for(X, Y, metric)
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 115, in is_usable_for
    and (is_numpy_c_ordered(X) or is_valid_sparse_matrix(X))
         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_pairwise_distances_reduction\_dispatcher.py", line 99, in is_numpy_c_ordered
    return hasattr(X, "flags") and X.flags.c_contiguous
                                   ^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flags' object has no attribute 'c_contiguous'

  warnings.warn(

2024-04-09 11:58:39,253:INFO:Calculating mean and std
2024-04-09 11:58:39,254:INFO:Creating metrics dataframe
2024-04-09 11:58:39,256:INFO:Uploading results into container
2024-04-09 11:58:39,256:INFO:Uploading model into container now
2024-04-09 11:58:39,257:INFO:_master_model_container: 6
2024-04-09 11:58:39,257:INFO:_display_container: 4
2024-04-09 11:58:39,257:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-04-09 11:58:39,258:INFO:create_model() successfully completed......................................
2024-04-09 11:58:39,479:ERROR:create_model() for KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform') raised an exception or returned all 0.0:
2024-04-09 11:58:39,493:ERROR:Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 797, in compare_models
    np.sum(
AssertionError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 818, in compare_models
    np.sum(
AssertionError

2024-04-09 11:58:39,494:INFO:Initializing Naive Bayes
2024-04-09 11:58:39,494:INFO:Total runtime is 0.015284264087677003 minutes
2024-04-09 11:58:39,499:INFO:SubProcess create_model() called ==================================
2024-04-09 11:58:39,499:INFO:Initializing create_model()
2024-04-09 11:58:39,499:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=nb, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2F4E66BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:58:39,499:INFO:Checking exceptions
2024-04-09 11:58:39,499:INFO:Importing libraries
2024-04-09 11:58:39,499:INFO:Copying training dataset
2024-04-09 11:58:39,512:INFO:Defining folds
2024-04-09 11:58:39,512:INFO:Declaring metric variables
2024-04-09 11:58:39,512:INFO:Importing untrained model
2024-04-09 11:58:39,512:INFO:Naive Bayes Imported successfully
2024-04-09 11:58:39,527:INFO:Starting cross validation
2024-04-09 11:58:39,528:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:58:39,562:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,562:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,562:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,562:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,562:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,569:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,569:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,569:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,576:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,577:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,580:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,580:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,580:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,580:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-04-09 11:58:39,580:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,580:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,595:INFO:Calculating mean and std
2024-04-09 11:58:39,595:INFO:Creating metrics dataframe
2024-04-09 11:58:39,595:INFO:Uploading results into container
2024-04-09 11:58:39,599:INFO:Uploading model into container now
2024-04-09 11:58:39,599:INFO:_master_model_container: 7
2024-04-09 11:58:39,599:INFO:_display_container: 4
2024-04-09 11:58:39,599:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-04-09 11:58:39,599:INFO:create_model() successfully completed......................................
2024-04-09 11:58:39,741:INFO:SubProcess create_model() end ==================================
2024-04-09 11:58:39,741:INFO:Creating metrics dataframe
2024-04-09 11:58:39,766:INFO:Initializing Decision Tree Classifier
2024-04-09 11:58:39,766:INFO:Total runtime is 0.019810692469278975 minutes
2024-04-09 11:58:39,772:INFO:SubProcess create_model() called ==================================
2024-04-09 11:58:39,772:INFO:Initializing create_model()
2024-04-09 11:58:39,772:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=dt, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2F4E66BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:58:39,772:INFO:Checking exceptions
2024-04-09 11:58:39,772:INFO:Importing libraries
2024-04-09 11:58:39,772:INFO:Copying training dataset
2024-04-09 11:58:39,792:INFO:Defining folds
2024-04-09 11:58:39,792:INFO:Declaring metric variables
2024-04-09 11:58:39,793:INFO:Importing untrained model
2024-04-09 11:58:39,799:INFO:Decision Tree Classifier Imported successfully
2024-04-09 11:58:39,799:INFO:Starting cross validation
2024-04-09 11:58:39,809:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:58:39,850:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,851:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,853:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,853:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,855:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,856:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,856:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,858:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,860:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,860:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,861:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,861:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,863:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,864:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:39,868:INFO:Calculating mean and std
2024-04-09 11:58:39,868:INFO:Creating metrics dataframe
2024-04-09 11:58:39,870:INFO:Uploading results into container
2024-04-09 11:58:39,871:INFO:Uploading model into container now
2024-04-09 11:58:39,871:INFO:_master_model_container: 8
2024-04-09 11:58:39,871:INFO:_display_container: 4
2024-04-09 11:58:39,872:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5526, splitter='best')
2024-04-09 11:58:39,872:INFO:create_model() successfully completed......................................
2024-04-09 11:58:40,100:INFO:SubProcess create_model() end ==================================
2024-04-09 11:58:40,100:INFO:Creating metrics dataframe
2024-04-09 11:58:40,107:INFO:Initializing SVM - Linear Kernel
2024-04-09 11:58:40,107:INFO:Total runtime is 0.025503520170847577 minutes
2024-04-09 11:58:40,107:INFO:SubProcess create_model() called ==================================
2024-04-09 11:58:40,107:INFO:Initializing create_model()
2024-04-09 11:58:40,107:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=svm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2F4E66BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:58:40,107:INFO:Checking exceptions
2024-04-09 11:58:40,107:INFO:Importing libraries
2024-04-09 11:58:40,107:INFO:Copying training dataset
2024-04-09 11:58:40,128:INFO:Defining folds
2024-04-09 11:58:40,128:INFO:Declaring metric variables
2024-04-09 11:58:40,130:INFO:Importing untrained model
2024-04-09 11:58:40,130:INFO:SVM - Linear Kernel Imported successfully
2024-04-09 11:58:40,146:INFO:Starting cross validation
2024-04-09 11:58:40,146:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:58:40,193:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 11:58:40,193:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 11:58:40,194:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,195:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,195:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 11:58:40,197:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,198:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 11:58:40,198:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,198:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,200:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,201:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-04-09 11:58:40,201:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-04-09 11:58:40,201:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,202:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 11:58:40,203:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,203:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-04-09 11:58:40,203:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,204:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,205:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,205:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,206:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-04-09 11:58:40,208:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,209:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,211:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-04-09 11:58:40,213:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,220:INFO:Calculating mean and std
2024-04-09 11:58:40,221:INFO:Creating metrics dataframe
2024-04-09 11:58:40,223:INFO:Uploading results into container
2024-04-09 11:58:40,223:INFO:Uploading model into container now
2024-04-09 11:58:40,224:INFO:_master_model_container: 9
2024-04-09 11:58:40,224:INFO:_display_container: 4
2024-04-09 11:58:40,224:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=5526, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-04-09 11:58:40,225:INFO:create_model() successfully completed......................................
2024-04-09 11:58:40,416:INFO:SubProcess create_model() end ==================================
2024-04-09 11:58:40,416:INFO:Creating metrics dataframe
2024-04-09 11:58:40,441:INFO:Initializing Ridge Classifier
2024-04-09 11:58:40,442:INFO:Total runtime is 0.031083365281422935 minutes
2024-04-09 11:58:40,453:INFO:SubProcess create_model() called ==================================
2024-04-09 11:58:40,453:INFO:Initializing create_model()
2024-04-09 11:58:40,453:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=ridge, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2F4E66BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:58:40,453:INFO:Checking exceptions
2024-04-09 11:58:40,454:INFO:Importing libraries
2024-04-09 11:58:40,454:INFO:Copying training dataset
2024-04-09 11:58:40,476:INFO:Defining folds
2024-04-09 11:58:40,478:INFO:Declaring metric variables
2024-04-09 11:58:40,483:INFO:Importing untrained model
2024-04-09 11:58:40,494:INFO:Ridge Classifier Imported successfully
2024-04-09 11:58:40,501:INFO:Starting cross validation
2024-04-09 11:58:40,510:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:58:40,544:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.41415e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 11:58:40,545:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.05293e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 11:58:40,551:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 11:58:40,552:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,554:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,555:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 11:58:40,556:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.59029e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 11:58:40,557:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,558:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,559:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=1.72505e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 11:58:40,559:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,562:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.08055e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 11:58:40,562:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,566:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 11:58:40,568:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,570:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 11:58:40,571:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,572:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,574:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 11:58:40,574:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,575:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,576:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,576:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,576:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,576:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:40,576:INFO:Calculating mean and std
2024-04-09 11:58:40,576:INFO:Creating metrics dataframe
2024-04-09 11:58:40,592:INFO:Uploading results into container
2024-04-09 11:58:40,592:INFO:Uploading model into container now
2024-04-09 11:58:40,595:INFO:_master_model_container: 10
2024-04-09 11:58:40,595:INFO:_display_container: 4
2024-04-09 11:58:40,595:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=5526, solver='auto',
                tol=0.0001)
2024-04-09 11:58:40,595:INFO:create_model() successfully completed......................................
2024-04-09 11:58:40,754:INFO:SubProcess create_model() end ==================================
2024-04-09 11:58:40,754:INFO:Creating metrics dataframe
2024-04-09 11:58:40,769:INFO:Initializing Random Forest Classifier
2024-04-09 11:58:40,769:INFO:Total runtime is 0.03654071092605591 minutes
2024-04-09 11:58:40,785:INFO:SubProcess create_model() called ==================================
2024-04-09 11:58:40,785:INFO:Initializing create_model()
2024-04-09 11:58:40,785:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=rf, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2F4E66BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:58:40,785:INFO:Checking exceptions
2024-04-09 11:58:40,785:INFO:Importing libraries
2024-04-09 11:58:40,785:INFO:Copying training dataset
2024-04-09 11:58:40,799:INFO:Defining folds
2024-04-09 11:58:40,799:INFO:Declaring metric variables
2024-04-09 11:58:40,802:INFO:Importing untrained model
2024-04-09 11:58:40,802:INFO:Random Forest Classifier Imported successfully
2024-04-09 11:58:40,810:INFO:Starting cross validation
2024-04-09 11:58:40,810:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:58:41,037:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,037:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,037:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,037:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,037:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,037:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,037:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,037:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,037:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,037:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,037:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,053:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,053:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,053:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,053:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,053:INFO:Calculating mean and std
2024-04-09 11:58:41,053:INFO:Creating metrics dataframe
2024-04-09 11:58:41,067:INFO:Uploading results into container
2024-04-09 11:58:41,068:INFO:Uploading model into container now
2024-04-09 11:58:41,068:INFO:_master_model_container: 11
2024-04-09 11:58:41,068:INFO:_display_container: 4
2024-04-09 11:58:41,068:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=5526, verbose=0, warm_start=False)
2024-04-09 11:58:41,068:INFO:create_model() successfully completed......................................
2024-04-09 11:58:41,224:INFO:SubProcess create_model() end ==================================
2024-04-09 11:58:41,224:INFO:Creating metrics dataframe
2024-04-09 11:58:41,239:INFO:Initializing Quadratic Discriminant Analysis
2024-04-09 11:58:41,239:INFO:Total runtime is 0.044373492399851486 minutes
2024-04-09 11:58:41,255:INFO:SubProcess create_model() called ==================================
2024-04-09 11:58:41,255:INFO:Initializing create_model()
2024-04-09 11:58:41,255:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=qda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2F4E66BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:58:41,255:INFO:Checking exceptions
2024-04-09 11:58:41,255:INFO:Importing libraries
2024-04-09 11:58:41,255:INFO:Copying training dataset
2024-04-09 11:58:41,263:INFO:Defining folds
2024-04-09 11:58:41,264:INFO:Declaring metric variables
2024-04-09 11:58:41,264:INFO:Importing untrained model
2024-04-09 11:58:41,271:INFO:Quadratic Discriminant Analysis Imported successfully
2024-04-09 11:58:41,276:INFO:Starting cross validation
2024-04-09 11:58:41,276:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:58:41,328:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,329:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,330:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,330:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,331:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,332:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,332:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,332:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,334:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,334:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,334:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,337:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,337:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,340:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,341:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,347:INFO:Calculating mean and std
2024-04-09 11:58:41,347:INFO:Creating metrics dataframe
2024-04-09 11:58:41,350:INFO:Uploading results into container
2024-04-09 11:58:41,350:INFO:Uploading model into container now
2024-04-09 11:58:41,351:INFO:_master_model_container: 12
2024-04-09 11:58:41,351:INFO:_display_container: 4
2024-04-09 11:58:41,351:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-04-09 11:58:41,351:INFO:create_model() successfully completed......................................
2024-04-09 11:58:41,555:INFO:SubProcess create_model() end ==================================
2024-04-09 11:58:41,555:INFO:Creating metrics dataframe
2024-04-09 11:58:41,582:INFO:Initializing Ada Boost Classifier
2024-04-09 11:58:41,584:INFO:Total runtime is 0.050110582510630296 minutes
2024-04-09 11:58:41,588:INFO:SubProcess create_model() called ==================================
2024-04-09 11:58:41,589:INFO:Initializing create_model()
2024-04-09 11:58:41,589:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=ada, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2F4E66BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:58:41,589:INFO:Checking exceptions
2024-04-09 11:58:41,590:INFO:Importing libraries
2024-04-09 11:58:41,590:INFO:Copying training dataset
2024-04-09 11:58:41,596:INFO:Defining folds
2024-04-09 11:58:41,596:INFO:Declaring metric variables
2024-04-09 11:58:41,601:INFO:Importing untrained model
2024-04-09 11:58:41,604:INFO:Ada Boost Classifier Imported successfully
2024-04-09 11:58:41,610:INFO:Starting cross validation
2024-04-09 11:58:41,610:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:58:41,867:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,867:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,867:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,867:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,867:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,867:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,883:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,883:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,883:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,904:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,904:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,914:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,914:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,914:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,914:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:41,914:INFO:Calculating mean and std
2024-04-09 11:58:41,914:INFO:Creating metrics dataframe
2024-04-09 11:58:41,914:INFO:Uploading results into container
2024-04-09 11:58:41,914:INFO:Uploading model into container now
2024-04-09 11:58:41,914:INFO:_master_model_container: 13
2024-04-09 11:58:41,914:INFO:_display_container: 4
2024-04-09 11:58:41,914:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=5526)
2024-04-09 11:58:41,914:INFO:create_model() successfully completed......................................
2024-04-09 11:58:42,102:INFO:SubProcess create_model() end ==================================
2024-04-09 11:58:42,103:INFO:Creating metrics dataframe
2024-04-09 11:58:42,110:INFO:Initializing Gradient Boosting Classifier
2024-04-09 11:58:42,110:INFO:Total runtime is 0.05887591044108073 minutes
2024-04-09 11:58:42,110:INFO:SubProcess create_model() called ==================================
2024-04-09 11:58:42,110:INFO:Initializing create_model()
2024-04-09 11:58:42,110:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=gbc, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2F4E66BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:58:42,110:INFO:Checking exceptions
2024-04-09 11:58:42,110:INFO:Importing libraries
2024-04-09 11:58:42,110:INFO:Copying training dataset
2024-04-09 11:58:42,126:INFO:Defining folds
2024-04-09 11:58:42,126:INFO:Declaring metric variables
2024-04-09 11:58:42,129:INFO:Importing untrained model
2024-04-09 11:58:42,129:INFO:Gradient Boosting Classifier Imported successfully
2024-04-09 11:58:42,129:INFO:Starting cross validation
2024-04-09 11:58:42,129:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:58:43,116:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,126:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,126:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,126:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,126:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,126:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,126:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,126:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,126:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,158:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,158:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,158:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,173:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,189:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,189:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,189:INFO:Calculating mean and std
2024-04-09 11:58:43,189:INFO:Creating metrics dataframe
2024-04-09 11:58:43,189:INFO:Uploading results into container
2024-04-09 11:58:43,189:INFO:Uploading model into container now
2024-04-09 11:58:43,189:INFO:_master_model_container: 14
2024-04-09 11:58:43,189:INFO:_display_container: 4
2024-04-09 11:58:43,205:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=5526, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-04-09 11:58:43,205:INFO:create_model() successfully completed......................................
2024-04-09 11:58:43,387:INFO:SubProcess create_model() end ==================================
2024-04-09 11:58:43,387:INFO:Creating metrics dataframe
2024-04-09 11:58:43,428:INFO:Initializing Linear Discriminant Analysis
2024-04-09 11:58:43,428:INFO:Total runtime is 0.08085322380065918 minutes
2024-04-09 11:58:43,436:INFO:SubProcess create_model() called ==================================
2024-04-09 11:58:43,436:INFO:Initializing create_model()
2024-04-09 11:58:43,437:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=lda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2F4E66BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:58:43,437:INFO:Checking exceptions
2024-04-09 11:58:43,437:INFO:Importing libraries
2024-04-09 11:58:43,438:INFO:Copying training dataset
2024-04-09 11:58:43,453:INFO:Defining folds
2024-04-09 11:58:43,459:INFO:Declaring metric variables
2024-04-09 11:58:43,461:INFO:Importing untrained model
2024-04-09 11:58:43,461:INFO:Linear Discriminant Analysis Imported successfully
2024-04-09 11:58:43,481:INFO:Starting cross validation
2024-04-09 11:58:43,481:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:58:43,545:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,545:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,545:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,545:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,545:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,545:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,545:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,545:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,545:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,545:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,545:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,545:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,560:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,562:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,563:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:43,563:INFO:Calculating mean and std
2024-04-09 11:58:43,563:INFO:Creating metrics dataframe
2024-04-09 11:58:43,563:INFO:Uploading results into container
2024-04-09 11:58:43,576:INFO:Uploading model into container now
2024-04-09 11:58:43,578:INFO:_master_model_container: 15
2024-04-09 11:58:43,578:INFO:_display_container: 4
2024-04-09 11:58:43,578:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-04-09 11:58:43,578:INFO:create_model() successfully completed......................................
2024-04-09 11:58:43,832:INFO:SubProcess create_model() end ==================================
2024-04-09 11:58:43,832:INFO:Creating metrics dataframe
2024-04-09 11:58:43,848:INFO:Initializing Extra Trees Classifier
2024-04-09 11:58:43,848:INFO:Total runtime is 0.08785738150278727 minutes
2024-04-09 11:58:43,856:INFO:SubProcess create_model() called ==================================
2024-04-09 11:58:43,856:INFO:Initializing create_model()
2024-04-09 11:58:43,856:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=et, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2F4E66BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:58:43,857:INFO:Checking exceptions
2024-04-09 11:58:43,857:INFO:Importing libraries
2024-04-09 11:58:43,857:INFO:Copying training dataset
2024-04-09 11:58:43,859:INFO:Defining folds
2024-04-09 11:58:43,859:INFO:Declaring metric variables
2024-04-09 11:58:43,873:INFO:Importing untrained model
2024-04-09 11:58:43,874:INFO:Extra Trees Classifier Imported successfully
2024-04-09 11:58:43,874:INFO:Starting cross validation
2024-04-09 11:58:43,874:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:58:44,056:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,056:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,072:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,072:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,072:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,072:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,072:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,072:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,072:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,072:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,072:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,088:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,091:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,093:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,093:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,093:INFO:Calculating mean and std
2024-04-09 11:58:44,093:INFO:Creating metrics dataframe
2024-04-09 11:58:44,109:INFO:Uploading results into container
2024-04-09 11:58:44,110:INFO:Uploading model into container now
2024-04-09 11:58:44,110:INFO:_master_model_container: 16
2024-04-09 11:58:44,110:INFO:_display_container: 4
2024-04-09 11:58:44,111:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5526, verbose=0, warm_start=False)
2024-04-09 11:58:44,111:INFO:create_model() successfully completed......................................
2024-04-09 11:58:44,287:INFO:SubProcess create_model() end ==================================
2024-04-09 11:58:44,287:INFO:Creating metrics dataframe
2024-04-09 11:58:44,303:INFO:Initializing Extreme Gradient Boosting
2024-04-09 11:58:44,303:INFO:Total runtime is 0.09543222188949585 minutes
2024-04-09 11:58:44,309:INFO:SubProcess create_model() called ==================================
2024-04-09 11:58:44,309:INFO:Initializing create_model()
2024-04-09 11:58:44,309:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=xgboost, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2F4E66BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:58:44,309:INFO:Checking exceptions
2024-04-09 11:58:44,309:INFO:Importing libraries
2024-04-09 11:58:44,309:INFO:Copying training dataset
2024-04-09 11:58:44,331:INFO:Defining folds
2024-04-09 11:58:44,331:INFO:Declaring metric variables
2024-04-09 11:58:44,331:INFO:Importing untrained model
2024-04-09 11:58:44,343:INFO:Extreme Gradient Boosting Imported successfully
2024-04-09 11:58:44,343:INFO:Starting cross validation
2024-04-09 11:58:44,343:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:58:44,510:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,510:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,510:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,521:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,521:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,521:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,521:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,521:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,521:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,521:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,521:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,521:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,521:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,521:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,521:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:44,537:INFO:Calculating mean and std
2024-04-09 11:58:44,537:INFO:Creating metrics dataframe
2024-04-09 11:58:44,537:INFO:Uploading results into container
2024-04-09 11:58:44,537:INFO:Uploading model into container now
2024-04-09 11:58:44,537:INFO:_master_model_container: 17
2024-04-09 11:58:44,537:INFO:_display_container: 4
2024-04-09 11:58:44,537:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-04-09 11:58:44,544:INFO:create_model() successfully completed......................................
2024-04-09 11:58:44,726:INFO:SubProcess create_model() end ==================================
2024-04-09 11:58:44,726:INFO:Creating metrics dataframe
2024-04-09 11:58:44,744:INFO:Initializing Light Gradient Boosting Machine
2024-04-09 11:58:44,744:INFO:Total runtime is 0.10279071728388468 minutes
2024-04-09 11:58:44,744:INFO:SubProcess create_model() called ==================================
2024-04-09 11:58:44,744:INFO:Initializing create_model()
2024-04-09 11:58:44,744:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=lightgbm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2F4E66BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:58:44,744:INFO:Checking exceptions
2024-04-09 11:58:44,744:INFO:Importing libraries
2024-04-09 11:58:44,744:INFO:Copying training dataset
2024-04-09 11:58:44,769:INFO:Defining folds
2024-04-09 11:58:44,769:INFO:Declaring metric variables
2024-04-09 11:58:44,781:INFO:Importing untrained model
2024-04-09 11:58:44,790:INFO:Light Gradient Boosting Machine Imported successfully
2024-04-09 11:58:44,812:INFO:Starting cross validation
2024-04-09 11:58:44,814:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:58:45,306:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:45,308:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:45,311:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:45,311:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:45,313:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:45,319:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:45,321:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:45,324:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:45,327:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:45,329:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:45,331:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:45,343:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:45,343:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:45,343:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:45,343:INFO:Calculating mean and std
2024-04-09 11:58:45,343:INFO:Creating metrics dataframe
2024-04-09 11:58:45,343:INFO:Uploading results into container
2024-04-09 11:58:45,358:INFO:Uploading model into container now
2024-04-09 11:58:45,359:INFO:_master_model_container: 18
2024-04-09 11:58:45,359:INFO:_display_container: 4
2024-04-09 11:58:45,359:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=5526, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-04-09 11:58:45,360:INFO:create_model() successfully completed......................................
2024-04-09 11:58:45,522:INFO:SubProcess create_model() end ==================================
2024-04-09 11:58:45,522:INFO:Creating metrics dataframe
2024-04-09 11:58:45,537:INFO:Initializing CatBoost Classifier
2024-04-09 11:58:45,537:INFO:Total runtime is 0.11600538889567057 minutes
2024-04-09 11:58:45,537:INFO:SubProcess create_model() called ==================================
2024-04-09 11:58:45,550:INFO:Initializing create_model()
2024-04-09 11:58:45,550:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=catboost, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2F4E66BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:58:45,550:INFO:Checking exceptions
2024-04-09 11:58:45,550:INFO:Importing libraries
2024-04-09 11:58:45,551:INFO:Copying training dataset
2024-04-09 11:58:45,560:INFO:Defining folds
2024-04-09 11:58:45,560:INFO:Declaring metric variables
2024-04-09 11:58:45,560:INFO:Importing untrained model
2024-04-09 11:58:45,575:INFO:CatBoost Classifier Imported successfully
2024-04-09 11:58:45,575:INFO:Starting cross validation
2024-04-09 11:58:45,575:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:58:55,552:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:55,552:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:55,552:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:55,859:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:55,861:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:55,861:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:55,865:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:55,867:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:55,867:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:55,868:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:55,872:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:55,874:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:55,927:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:55,932:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:55,937:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:55,946:INFO:Calculating mean and std
2024-04-09 11:58:55,947:INFO:Creating metrics dataframe
2024-04-09 11:58:55,950:INFO:Uploading results into container
2024-04-09 11:58:55,951:INFO:Uploading model into container now
2024-04-09 11:58:55,951:INFO:_master_model_container: 19
2024-04-09 11:58:55,951:INFO:_display_container: 4
2024-04-09 11:58:55,951:INFO:<catboost.core.CatBoostClassifier object at 0x000001A2F4A08CD0>
2024-04-09 11:58:55,951:INFO:create_model() successfully completed......................................
2024-04-09 11:58:56,145:INFO:SubProcess create_model() end ==================================
2024-04-09 11:58:56,145:INFO:Creating metrics dataframe
2024-04-09 11:58:56,165:INFO:Initializing Dummy Classifier
2024-04-09 11:58:56,165:INFO:Total runtime is 0.29313710927963255 minutes
2024-04-09 11:58:56,178:INFO:SubProcess create_model() called ==================================
2024-04-09 11:58:56,178:INFO:Initializing create_model()
2024-04-09 11:58:56,178:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=dummy, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2F4E66BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:58:56,178:INFO:Checking exceptions
2024-04-09 11:58:56,178:INFO:Importing libraries
2024-04-09 11:58:56,178:INFO:Copying training dataset
2024-04-09 11:58:56,196:INFO:Defining folds
2024-04-09 11:58:56,196:INFO:Declaring metric variables
2024-04-09 11:58:56,199:INFO:Importing untrained model
2024-04-09 11:58:56,199:INFO:Dummy Classifier Imported successfully
2024-04-09 11:58:56,209:INFO:Starting cross validation
2024-04-09 11:58:56,211:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 11:58:56,625:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:56,626:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:56,626:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-04-09 11:58:56,626:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:56,626:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:56,626:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:56,626:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:56,626:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:56,641:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:56,641:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-04-09 11:58:56,641:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:56,641:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-04-09 11:58:56,641:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:56,641:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-04-09 11:58:56,641:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:56,641:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:56,641:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:56,641:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:56,641:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-04-09 11:58:56,641:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 11:58:56,659:INFO:Calculating mean and std
2024-04-09 11:58:56,660:INFO:Creating metrics dataframe
2024-04-09 11:58:56,660:INFO:Uploading results into container
2024-04-09 11:58:56,660:INFO:Uploading model into container now
2024-04-09 11:58:56,660:INFO:_master_model_container: 20
2024-04-09 11:58:56,660:INFO:_display_container: 4
2024-04-09 11:58:56,660:INFO:DummyClassifier(constant=None, random_state=5526, strategy='prior')
2024-04-09 11:58:56,660:INFO:create_model() successfully completed......................................
2024-04-09 11:58:56,827:INFO:SubProcess create_model() end ==================================
2024-04-09 11:58:56,827:INFO:Creating metrics dataframe
2024-04-09 11:58:56,859:INFO:Initializing create_model()
2024-04-09 11:58:56,859:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=<catboost.core.CatBoostClassifier object at 0x000001A2F4A08CD0>, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:58:56,859:INFO:Checking exceptions
2024-04-09 11:58:56,860:INFO:Importing libraries
2024-04-09 11:58:56,860:INFO:Copying training dataset
2024-04-09 11:58:56,860:INFO:Defining folds
2024-04-09 11:58:56,860:INFO:Declaring metric variables
2024-04-09 11:58:56,860:INFO:Importing untrained model
2024-04-09 11:58:56,860:INFO:Declaring custom model
2024-04-09 11:58:56,860:INFO:CatBoost Classifier Imported successfully
2024-04-09 11:58:56,860:INFO:Cross validation set to False
2024-04-09 11:58:56,860:INFO:Fitting Model
2024-04-09 11:59:00,524:INFO:<catboost.core.CatBoostClassifier object at 0x000001A2F4D7EDD0>
2024-04-09 11:59:00,524:INFO:create_model() successfully completed......................................
2024-04-09 11:59:00,713:INFO:Initializing create_model()
2024-04-09 11:59:00,713:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:59:00,713:INFO:Checking exceptions
2024-04-09 11:59:00,713:INFO:Importing libraries
2024-04-09 11:59:00,713:INFO:Copying training dataset
2024-04-09 11:59:00,727:INFO:Defining folds
2024-04-09 11:59:00,727:INFO:Declaring metric variables
2024-04-09 11:59:00,727:INFO:Importing untrained model
2024-04-09 11:59:00,727:INFO:Declaring custom model
2024-04-09 11:59:00,729:INFO:Extreme Gradient Boosting Imported successfully
2024-04-09 11:59:00,729:INFO:Cross validation set to False
2024-04-09 11:59:00,729:INFO:Fitting Model
2024-04-09 11:59:00,792:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-04-09 11:59:00,792:INFO:create_model() successfully completed......................................
2024-04-09 11:59:00,980:INFO:Initializing create_model()
2024-04-09 11:59:00,980:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=5526, solver='auto',
                tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:59:00,980:INFO:Checking exceptions
2024-04-09 11:59:00,980:INFO:Importing libraries
2024-04-09 11:59:00,980:INFO:Copying training dataset
2024-04-09 11:59:00,999:INFO:Defining folds
2024-04-09 11:59:01,000:INFO:Declaring metric variables
2024-04-09 11:59:01,000:INFO:Importing untrained model
2024-04-09 11:59:01,000:INFO:Declaring custom model
2024-04-09 11:59:01,000:INFO:Ridge Classifier Imported successfully
2024-04-09 11:59:01,001:INFO:Cross validation set to False
2024-04-09 11:59:01,001:INFO:Fitting Model
2024-04-09 11:59:01,017:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=5526, solver='auto',
                tol=0.0001)
2024-04-09 11:59:01,018:INFO:create_model() successfully completed......................................
2024-04-09 11:59:01,191:INFO:Initializing create_model()
2024-04-09 11:59:01,191:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=5526), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:59:01,191:INFO:Checking exceptions
2024-04-09 11:59:01,191:INFO:Importing libraries
2024-04-09 11:59:01,191:INFO:Copying training dataset
2024-04-09 11:59:01,209:INFO:Defining folds
2024-04-09 11:59:01,209:INFO:Declaring metric variables
2024-04-09 11:59:01,209:INFO:Importing untrained model
2024-04-09 11:59:01,209:INFO:Declaring custom model
2024-04-09 11:59:01,210:INFO:Ada Boost Classifier Imported successfully
2024-04-09 11:59:01,211:INFO:Cross validation set to False
2024-04-09 11:59:01,211:INFO:Fitting Model
2024-04-09 11:59:01,501:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=5526)
2024-04-09 11:59:01,501:INFO:create_model() successfully completed......................................
2024-04-09 11:59:01,695:INFO:Initializing create_model()
2024-04-09 11:59:01,696:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=5526, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 11:59:01,696:INFO:Checking exceptions
2024-04-09 11:59:01,697:INFO:Importing libraries
2024-04-09 11:59:01,697:INFO:Copying training dataset
2024-04-09 11:59:01,713:INFO:Defining folds
2024-04-09 11:59:01,713:INFO:Declaring metric variables
2024-04-09 11:59:01,713:INFO:Importing untrained model
2024-04-09 11:59:01,713:INFO:Declaring custom model
2024-04-09 11:59:01,713:INFO:Light Gradient Boosting Machine Imported successfully
2024-04-09 11:59:01,713:INFO:Cross validation set to False
2024-04-09 11:59:01,713:INFO:Fitting Model
2024-04-09 11:59:01,742:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2024-04-09 11:59:01,742:INFO:[LightGBM] [Info] Number of positive: 148, number of negative: 250
2024-04-09 11:59:01,742:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000263 seconds.
2024-04-09 11:59:01,742:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-04-09 11:59:01,744:INFO:[LightGBM] [Info] Total Bins 4105
2024-04-09 11:59:01,745:INFO:[LightGBM] [Info] Number of data points in the train set: 398, number of used features: 31
2024-04-09 11:59:01,745:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.371859 -> initscore=-0.524249
2024-04-09 11:59:01,745:INFO:[LightGBM] [Info] Start training from score -0.524249
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,759:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,761:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,761:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,773:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,774:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,774:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,774:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,776:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,792:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,794:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-04-09 11:59:01,810:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=5526, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-04-09 11:59:01,810:INFO:create_model() successfully completed......................................
2024-04-09 11:59:01,960:INFO:_master_model_container: 20
2024-04-09 11:59:01,960:INFO:_display_container: 4
2024-04-09 11:59:01,962:INFO:[<catboost.core.CatBoostClassifier object at 0x000001A2F4D7EDD0>, XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...), RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=5526, solver='auto',
                tol=0.0001), AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=5526), LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=5526, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)]
2024-04-09 11:59:01,962:INFO:compare_models() successfully completed......................................
2024-04-09 12:00:24,565:INFO:Initializing blend_models()
2024-04-09 12:00:24,566:INFO:blend_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator_list=[<catboost.core.CatBoostClassifier object at 0x000001A2F4D7EDD0>, XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...), RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=5526, solver='auto',
                tol=0.0001), AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=5526), LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=5526, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)], fold=5, round=4, choose_better=False, optimize=Accuracy, method=auto, weights=None, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2024-04-09 12:00:24,566:INFO:Checking exceptions
2024-04-09 12:00:24,567:INFO:Estimator RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=5526, solver='auto',
                tol=0.0001) doesn't support probabilities, falling back to 'hard'.
2024-04-09 12:00:24,605:INFO:Importing libraries
2024-04-09 12:00:24,605:INFO:Copying training dataset
2024-04-09 12:00:24,616:INFO:Getting model names
2024-04-09 12:00:24,627:INFO:SubProcess create_model() called ==================================
2024-04-09 12:00:24,638:INFO:Initializing create_model()
2024-04-09 12:00:24,638:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4D7EDD0>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             importance_type='split',
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard', weights=None), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2F4D80D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 12:00:24,638:INFO:Checking exceptions
2024-04-09 12:00:24,638:INFO:Importing libraries
2024-04-09 12:00:24,638:INFO:Copying training dataset
2024-04-09 12:00:24,643:INFO:Defining folds
2024-04-09 12:00:24,651:INFO:Declaring metric variables
2024-04-09 12:00:24,655:INFO:Importing untrained model
2024-04-09 12:00:24,655:INFO:Declaring custom model
2024-04-09 12:00:24,665:INFO:Voting Classifier Imported successfully
2024-04-09 12:00:24,673:INFO:Starting cross validation
2024-04-09 12:00:24,674:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 12:00:25,497:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.59029e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:25,508:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=1.72505e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:25,508:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.41415e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:25,523:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.08055e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:25,536:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.05293e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:34,679:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 12:00:34,682:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:00:34,682:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:00:34,686:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:00:34,992:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 12:00:34,998:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:00:35,001:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:00:35,001:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:00:35,322:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 12:00:35,323:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:00:35,325:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:00:35,325:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:00:35,720:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 12:00:35,720:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:00:35,737:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:00:35,743:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:00:35,955:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 12:00:35,955:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:00:35,955:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:00:35,955:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:00:35,971:INFO:Calculating mean and std
2024-04-09 12:00:35,971:INFO:Creating metrics dataframe
2024-04-09 12:00:35,984:INFO:Finalizing model
2024-04-09 12:00:36,001:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=1.73348e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:39,987:INFO:Uploading results into container
2024-04-09 12:00:39,999:INFO:Uploading model into container now
2024-04-09 12:00:40,000:INFO:_master_model_container: 21
2024-04-09 12:00:40,000:INFO:_display_container: 5
2024-04-09 12:00:40,000:INFO:VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4A21210>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             importance_type='split',
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard', weights=None)
2024-04-09 12:00:40,000:INFO:create_model() successfully completed......................................
2024-04-09 12:00:40,188:INFO:SubProcess create_model() end ==================================
2024-04-09 12:00:40,210:INFO:_master_model_container: 21
2024-04-09 12:00:40,210:INFO:_display_container: 5
2024-04-09 12:00:40,210:INFO:VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4A21210>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             importance_type='split',
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard', weights=None)
2024-04-09 12:00:40,210:INFO:blend_models() successfully completed......................................
2024-04-09 12:00:48,684:INFO:Initializing tune_model()
2024-04-09 12:00:48,684:INFO:tune_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4A21210>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             importance_type='split',
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard', weights=None), fold=5, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={})
2024-04-09 12:00:48,684:INFO:Checking exceptions
2024-04-09 12:00:48,709:INFO:Copying training dataset
2024-04-09 12:00:48,714:INFO:Checking base model
2024-04-09 12:00:48,714:INFO:Base model : Voting Classifier
2024-04-09 12:00:48,714:INFO:Model has a special tunable class, using that
2024-04-09 12:00:48,726:INFO:Declaring metric variables
2024-04-09 12:00:48,726:INFO:Defining Hyperparameters
2024-04-09 12:00:48,906:INFO:Tuning with n_jobs=-1
2024-04-09 12:00:48,906:INFO:Initializing RandomizedSearchCV
2024-04-09 12:00:49,146:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.59029e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:49,146:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.08055e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:49,158:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.41415e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:49,158:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=1.72505e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:49,171:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.05293e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:49,182:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.41415e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:49,186:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.59029e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:49,193:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.05293e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:49,205:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.08055e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:49,205:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=1.72505e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:49,249:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.59029e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:53,503:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=1.72505e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:53,613:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.59029e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:53,740:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.05293e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:54,066:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.08055e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:00:55,543:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.41415e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:12,276:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.41415e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:13,676:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.05293e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:14,793:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=1.72505e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:14,793:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.08055e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:15,269:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.41415e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:15,269:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.59029e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:15,876:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.05293e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:16,100:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.08055e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:16,114:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=1.72505e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:16,467:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.59029e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:16,470:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.41415e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:20,336:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.05293e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:20,336:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=1.72505e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:20,336:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.41415e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:20,342:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.08055e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:20,342:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.59029e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:35,554:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.05293e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:37,138:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.08055e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:37,140:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=1.72505e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:37,319:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.59029e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:37,731:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.41415e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:38,567:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.05293e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:39,356:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.08055e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:42,118:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=1.72505e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:43,111:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.59029e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:43,837:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.41415e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:45,323:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.05293e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:45,452:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.08055e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:48,781:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=1.72505e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:48,781:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.59029e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:49,064:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.41415e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:01:49,983:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.05293e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:02:00,256:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.08055e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:02:01,247:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=1.72505e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:02:14,712:INFO:best_params: {'actual_estimator__weight_4': 0.26, 'actual_estimator__weight_3': 0.73, 'actual_estimator__weight_2': 0.7100000000000001, 'actual_estimator__weight_1': 0.28, 'actual_estimator__weight_0': 0.86}
2024-04-09 12:02:14,713:INFO:Hyperparameter search completed
2024-04-09 12:02:14,714:INFO:Getting base sklearn object from tunable
2024-04-09 12:02:14,759:INFO:SubProcess create_model() called ==================================
2024-04-09 12:02:14,764:INFO:Initializing create_model()
2024-04-09 12:02:14,764:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F5049F90>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard',
                 weights=[0.86, 0.28, 0.7100000000000001, 0.73, 0.26]), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A2F4E41B50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'estimators': [('CatBoost Classifier', <catboost.core.CatBoostClassifier object at 0x000001A2F30DE350>), ('Extreme Gradient Boosting', XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)), ('Ridge Classifier', RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=5526, solver='auto',
                tol=0.0001)), ('Ada Boost Classifier', AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=5526)), ('Light Gradient Boosting Machine', LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=5526, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0))], 'flatten_transform': True, 'n_jobs': -1, 'voting': 'hard', 'weights': [0.86, 0.28, 0.7100000000000001, 0.73, 0.26]})
2024-04-09 12:02:14,764:INFO:Checking exceptions
2024-04-09 12:02:14,764:INFO:Importing libraries
2024-04-09 12:02:14,764:INFO:Copying training dataset
2024-04-09 12:02:14,777:INFO:Defining folds
2024-04-09 12:02:14,777:INFO:Declaring metric variables
2024-04-09 12:02:14,777:INFO:Importing untrained model
2024-04-09 12:02:14,777:INFO:Declaring custom model
2024-04-09 12:02:14,777:INFO:Voting Classifier Imported successfully
2024-04-09 12:02:14,794:INFO:Starting cross validation
2024-04-09 12:02:14,795:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 12:02:14,841:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.59029e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:02:14,841:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.41415e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:02:14,841:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.05293e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:02:14,841:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.08055e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:02:14,841:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=1.72505e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:02:24,139:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 12:02:24,139:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:24,139:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:24,155:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:24,529:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 12:02:24,529:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:24,535:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:24,537:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:24,549:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 12:02:24,549:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:24,549:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:24,555:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:24,565:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 12:02:24,569:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:24,571:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:24,573:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:24,716:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 12:02:24,717:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:24,720:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:24,722:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:24,725:INFO:Calculating mean and std
2024-04-09 12:02:24,725:INFO:Creating metrics dataframe
2024-04-09 12:02:24,731:INFO:Finalizing model
2024-04-09 12:02:24,745:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=1.73348e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:02:28,263:INFO:Uploading results into container
2024-04-09 12:02:28,263:INFO:Uploading model into container now
2024-04-09 12:02:28,263:INFO:_master_model_container: 22
2024-04-09 12:02:28,263:INFO:_display_container: 6
2024-04-09 12:02:28,272:INFO:VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4A23710>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard',
                 weights=[0.86, 0.28, 0.7100000000000001, 0.73, 0.26])
2024-04-09 12:02:28,272:INFO:create_model() successfully completed......................................
2024-04-09 12:02:28,496:INFO:SubProcess create_model() end ==================================
2024-04-09 12:02:28,496:INFO:choose_better activated
2024-04-09 12:02:28,496:INFO:SubProcess create_model() called ==================================
2024-04-09 12:02:28,512:INFO:Initializing create_model()
2024-04-09 12:02:28,512:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4A21210>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             importance_type='split',
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard', weights=None), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-09 12:02:28,512:INFO:Checking exceptions
2024-04-09 12:02:28,521:INFO:Importing libraries
2024-04-09 12:02:28,521:INFO:Copying training dataset
2024-04-09 12:02:28,533:INFO:Defining folds
2024-04-09 12:02:28,534:INFO:Declaring metric variables
2024-04-09 12:02:28,534:INFO:Importing untrained model
2024-04-09 12:02:28,534:INFO:Declaring custom model
2024-04-09 12:02:28,538:INFO:Voting Classifier Imported successfully
2024-04-09 12:02:28,538:INFO:Starting cross validation
2024-04-09 12:02:28,539:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-04-09 12:02:28,592:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.59029e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:02:28,594:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.41415e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:02:28,594:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.05293e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:02:28,601:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=2.08055e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:02:28,603:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=1.72505e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:02:35,993:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 12:02:35,993:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:35,999:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:36,003:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:36,937:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 12:02:36,937:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:36,937:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:36,937:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:37,125:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 12:02:37,127:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:37,129:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:37,131:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:37,165:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 12:02:37,166:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:37,168:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:37,170:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:37,247:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 399, in _score
    y_pred = method_caller(clf, "predict_proba", X, pos_label=self._get_pos_label())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 86, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\_response.py", line 73, in _get_response_values
    prediction_method = _check_response_method(estimator, response_method)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1940, in _check_response_method
    raise AttributeError(
AttributeError: Pipeline has none of the following attributes: predict_proba.

  warnings.warn(

2024-04-09 12:02:37,248:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:37,249:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:37,249:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1521: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-04-09 12:02:37,256:INFO:Calculating mean and std
2024-04-09 12:02:37,256:INFO:Creating metrics dataframe
2024-04-09 12:02:37,256:INFO:Finalizing model
2024-04-09 12:02:37,272:WARNING:C:\Users\yjg10\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:211: LinAlgWarning: Ill-conditioned matrix (rcond=1.73348e-19): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-04-09 12:02:40,527:INFO:Uploading results into container
2024-04-09 12:02:40,527:INFO:Uploading model into container now
2024-04-09 12:02:40,527:INFO:_master_model_container: 23
2024-04-09 12:02:40,527:INFO:_display_container: 7
2024-04-09 12:02:40,527:INFO:VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F50485D0>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             importance_type='split',
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard', weights=None)
2024-04-09 12:02:40,527:INFO:create_model() successfully completed......................................
2024-04-09 12:02:40,728:INFO:SubProcess create_model() end ==================================
2024-04-09 12:02:40,758:INFO:VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F50485D0>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             importance_type='split',
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard', weights=None) result for Accuracy is 0.9698
2024-04-09 12:02:40,758:INFO:VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4A23710>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard',
                 weights=[0.86, 0.28, 0.7100000000000001, 0.73, 0.26]) result for Accuracy is 0.9774
2024-04-09 12:02:40,774:INFO:VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4A23710>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard',
                 weights=[0.86, 0.28, 0.7100000000000001, 0.73, 0.26]) is best model
2024-04-09 12:02:40,774:INFO:choose_better completed
2024-04-09 12:02:40,801:INFO:_master_model_container: 23
2024-04-09 12:02:40,801:INFO:_display_container: 6
2024-04-09 12:02:40,814:INFO:VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4A23710>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard',
                 weights=[0.86, 0.28, 0.7100000000000001, 0.73, 0.26])
2024-04-09 12:02:40,815:INFO:tune_model() successfully completed......................................
2024-04-09 12:03:01,005:INFO:Initializing evaluate_model()
2024-04-09 12:03:01,005:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4A23710>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard',
                 weights=[0.86, 0.28, 0.7100000000000001, 0.73, 0.26]), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-04-09 12:03:01,025:INFO:Initializing plot_model()
2024-04-09 12:03:01,025:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4A23710>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard',
                 weights=[0.86, 0.28, 0.7100000000000001, 0.73, 0.26]), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 12:03:01,025:INFO:Checking exceptions
2024-04-09 12:03:01,041:INFO:Preloading libraries
2024-04-09 12:03:01,061:INFO:Copying training dataset
2024-04-09 12:03:01,061:INFO:Plot type: pipeline
2024-04-09 12:03:01,192:INFO:Visual Rendered Successfully
2024-04-09 12:03:01,370:INFO:plot_model() successfully completed......................................
2024-04-09 12:03:05,542:INFO:Initializing predict_model()
2024-04-09 12:03:05,542:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4A23710>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard',
                 weights=[0.86, 0.28, 0.7100000000000001, 0.73, 0.26]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A2F4193920>)
2024-04-09 12:03:05,542:INFO:Checking exceptions
2024-04-09 12:03:05,542:INFO:Preloading libraries
2024-04-09 12:03:19,059:INFO:Initializing plot_model()
2024-04-09 12:03:19,060:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4A23710>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard',
                 weights=[0.86, 0.28, 0.7100000000000001, 0.73, 0.26]), plot=feature, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 12:03:19,060:INFO:Checking exceptions
2024-04-09 12:03:22,304:INFO:Initializing plot_model()
2024-04-09 12:03:22,305:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4A23710>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard',
                 weights=[0.86, 0.28, 0.7100000000000001, 0.73, 0.26]), plot=feature_all, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 12:03:22,305:INFO:Checking exceptions
2024-04-09 12:03:24,158:INFO:Initializing plot_model()
2024-04-09 12:03:24,158:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4A23710>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard',
                 weights=[0.86, 0.28, 0.7100000000000001, 0.73, 0.26]), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 12:03:24,158:INFO:Checking exceptions
2024-04-09 12:03:24,159:INFO:Preloading libraries
2024-04-09 12:03:24,180:INFO:Copying training dataset
2024-04-09 12:03:24,180:INFO:Plot type: pipeline
2024-04-09 12:03:24,275:INFO:Visual Rendered Successfully
2024-04-09 12:03:24,413:INFO:plot_model() successfully completed......................................
2024-04-09 12:03:27,279:INFO:Initializing plot_model()
2024-04-09 12:03:27,280:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=10, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=4, min_samples_split=5,
                       min_weight_fraction_leaf=0.0, n_estimators=100,
                       n_jobs=-1, oob_score=False, random_state=5526, verbose=0,
                       warm_start=False), plot=feature, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 12:03:27,280:INFO:Checking exceptions
2024-04-09 12:03:27,305:INFO:Preloading libraries
2024-04-09 12:03:27,318:INFO:Copying training dataset
2024-04-09 12:03:27,318:INFO:Plot type: feature
2024-04-09 12:03:27,319:WARNING:No coef_ found. Trying feature_importances_
2024-04-09 12:03:27,532:INFO:Visual Rendered Successfully
2024-04-09 12:03:27,699:INFO:plot_model() successfully completed......................................
2024-04-09 12:03:30,863:INFO:Initializing plot_model()
2024-04-09 12:03:30,863:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=10, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=4, min_samples_split=5,
                       min_weight_fraction_leaf=0.0, n_estimators=100,
                       n_jobs=-1, oob_score=False, random_state=5526, verbose=0,
                       warm_start=False), plot=feature_all, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 12:03:30,863:INFO:Checking exceptions
2024-04-09 12:03:30,887:INFO:Preloading libraries
2024-04-09 12:03:30,894:INFO:Copying training dataset
2024-04-09 12:03:30,895:INFO:Plot type: feature_all
2024-04-09 12:03:30,933:WARNING:No coef_ found. Trying feature_importances_
2024-04-09 12:03:31,213:INFO:Visual Rendered Successfully
2024-04-09 12:03:31,470:INFO:plot_model() successfully completed......................................
2024-04-09 13:41:07,442:INFO:Initializing plot_model()
2024-04-09 13:41:07,443:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4A23710>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard',
                 weights=[0.86, 0.28, 0.7100000000000001, 0.73, 0.26]), plot=rfe, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 13:41:07,443:INFO:Checking exceptions
2024-04-09 13:41:08,411:INFO:Initializing plot_model()
2024-04-09 13:41:08,411:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4A23710>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard',
                 weights=[0.86, 0.28, 0.7100000000000001, 0.73, 0.26]), plot=feature_all, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 13:41:08,411:INFO:Checking exceptions
2024-04-09 13:41:10,501:INFO:Initializing plot_model()
2024-04-09 13:41:10,501:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4A23710>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard',
                 weights=[0.86, 0.28, 0.7100000000000001, 0.73, 0.26]), plot=feature, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 13:41:10,501:INFO:Checking exceptions
2024-04-09 13:41:14,867:INFO:Initializing plot_model()
2024-04-09 13:41:14,868:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4A23710>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard',
                 weights=[0.86, 0.28, 0.7100000000000001, 0.73, 0.26]), plot=parameter, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 13:41:14,868:INFO:Checking exceptions
2024-04-09 13:41:14,872:INFO:Preloading libraries
2024-04-09 13:41:14,885:INFO:Copying training dataset
2024-04-09 13:41:14,885:INFO:Plot type: parameter
2024-04-09 13:41:14,901:INFO:Visual Rendered Successfully
2024-04-09 13:41:15,124:INFO:plot_model() successfully completed......................................
2024-04-09 13:41:21,851:INFO:Initializing plot_model()
2024-04-09 13:41:21,851:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A2F4218D90>, estimator=VotingClassifier(estimators=[('CatBoost Classifier',
                              <catboost.core.CatBoostClassifier object at 0x000001A2F4A23710>),
                             ('Extreme Gradient Boosting',
                              XGBClassifier(base_score=None, booster='gbtree',
                                            callbacks=None,
                                            colsample_bylevel=None,
                                            colsample_bynode=None,
                                            colsample_bytree=None, device='cpu',
                                            early_stopping_rounds=None,
                                            enable_categorical=False,
                                            eval_metric=None...
                                             learning_rate=0.1, max_depth=-1,
                                             min_child_samples=20,
                                             min_child_weight=0.001,
                                             min_split_gain=0.0,
                                             n_estimators=100, n_jobs=-1,
                                             num_leaves=31, objective=None,
                                             random_state=5526, reg_alpha=0.0,
                                             reg_lambda=0.0, subsample=1.0,
                                             subsample_for_bin=200000,
                                             subsample_freq=0))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='hard',
                 weights=[0.86, 0.28, 0.7100000000000001, 0.73, 0.26]), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-04-09 13:41:21,851:INFO:Checking exceptions
2024-04-09 13:41:21,851:INFO:Preloading libraries
2024-04-09 13:41:21,875:INFO:Copying training dataset
2024-04-09 13:41:21,875:INFO:Plot type: pipeline
2024-04-09 13:41:21,978:INFO:Visual Rendered Successfully
2024-04-09 13:41:22,261:INFO:plot_model() successfully completed......................................
